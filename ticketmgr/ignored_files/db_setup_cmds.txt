-- define schema
CREATE SCHEMA ticketmgr;

-- create tables
CREATE TABLE ticketmgr.users (
	id					SERIAL PRIMARY KEY,
	username		varchar(32),
	password		varchar(32),
	salt				char(16)
);

CREATE TABLE ticketmgr.admins (
	id					SERIAL PRIMARY KEY,
	username		varchar(32),
	password		varchar(32),
	salt				char(16)
);

CREATE TABLE ticketmgr.events (
	id					SERIAL PRIMARY KEY,
	title				text,
	description text,
	datetime		timestamp(0)
);

-- if an event is deleted remove all agents bound to that event
CREATE TABLE ticketmgr.agents (
	id					SERIAL PRIMARY KEY,
	eventid			int REFERENCES ticketmgr.events(id) ON DELETE CASCADE
);

-- if user deletes account remove all rows with that user in userevents
-- similarly, if an event is deleted remove all rows with that event
CREATE TABLE ticketmgr.userevents (
	userid			int REFERENCES ticketmgr.users(id) ON DELETE CASCADE,
	eventid			int REFERENCES ticketmgr.events(id) ON DELETE CASCADE
);

CREATE TABLE ticketmgr.adminevents (
	adminid			int REFERENCES ticketmgr.admins(id) ON DELETE CASCADE,
	eventid			int REFERENCES ticketmgr.events(id) ON DELETE CASCADE
);

-- enter sample rows

-- 3 users
INSERT INTO ticketmgr.users (username, password, salt)
														VALUES ('user1', 'user1password', 'ABCDEFGHIKJLMNOP');
INSERT INTO ticketmgr.users (username, password, salt)
														VALUES ('user2', 'user2password', 'ABCDEFGHIKJLMNOP');
INSERT INTO ticketmgr.users (username, password, salt)
														VALUES ('user3', 'user3password', 'ABCDEFGHIKJLMNOP');
-- 2 admins
INSERT INTO ticketmgr.admins (username, password, salt)
														VALUES ('admin1', 'admin1password', 'ABCDEFGHIJKLMNOP');
INSERT INTO ticketmgr.admins (username, password, salt)
														VALUES ('admin2', 'admin2password', 'ABCDEFGHIJKLMNOP');
-- 2 events
INSERT INTO ticketmgr.events (title, description, datetime)
														VALUES ('Test event 1', 'This is the first test event.', NOW());
INSERT INTO ticketmgr.events (title, description, datetime)
														VALUES ('Test event 2', 'This is the second test event.', NOW());
-- 1 agent
INSERT INTO ticketmgr.agents (eventid)
														VALUES ((SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
-- 4 userevent junctions
INSERT INTO ticketmgr.userevents (userid, eventid)
														VALUES ((SELECT id FROM ticketmgr.users WHERE username = 'user1'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
INSERT INTO ticketmgr.userevents (userid, eventid)
														VALUES ((SELECT id FROM ticketmgr.users WHERE username = 'user2'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
INSERT INTO ticketmgr.userevents (userid, eventid)
														VALUES ((SELECT id FROM ticketmgr.users WHERE username = 'user2'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 2'));
INSERT INTO ticketmgr.userevents (userid, eventid)
														VALUES ((SELECT id FROM ticketmgr.users WHERE username = 'user3'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
-- 3 adminevent junctions
INSERT INTO ticketmgr.adminevents (adminid, eventid)
														VALUES ((SELECT id FROM ticketmgr.admins WHERE username = 'admin1'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
INSERT INTO ticketmgr.adminevents (adminid, eventid)
														VALUES ((SELECT id FROM ticketmgr.admins WHERE username = 'admin2'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 1'));
INSERT INTO ticketmgr.adminevents (adminid, eventid)
														VALUES ((SELECT id FROM ticketmgr.admins WHERE username = 'admin2'),
														(SELECT id FROM ticketmgr.events WHERE title = 'Test event 2'));
