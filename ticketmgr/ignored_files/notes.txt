# Authentication-related notes
API should be accessable from both browser and machine-based clients
authorization scope?
User:
- Edit: self-related information only
- View: event information only (excluding registration data - maybe just number of registered users / capacity)
Agent:
- Edit: self-related information only, excluding registered event
- View: authenticity of ticket-totp code, registered event info, event-user-roster, event-registered-user id/name
Admin:
- Edit: self-related info, event info, event rosters
- View: all editable information, id/name of people in all event rosters

Some JSON-related notes
JsonResponse.content contains payload
type(JsonResponse.content) == bytes
use
import json
json.loads(JsonResponse.content)
to get a python dict instead of raw bytes

# Generate per-ticket secret (combination of user and event unique data) and send to client during initial setup
# generation should be reproducible on server so generated TOTP codes can be verified with otphandler.
# Where to save this per-ticket secret?
# just wrote that per-ticket secret can be reproducibly generated on server, so no need to store
# how to generate this secret?
# some combination of hashed user password and unique event hash
# need to save hash for each event


    """ev_hash and some unique data from user are used to generate
    ticket secrets on the fly, so consider switching to pre-computed
    secrets saved in the db
    """
    though this may not matter since theoretically secret generation will only happen twice in its lifetime
    once during initial ticket registration, and once during ticket totp verification

New user POST JSON payload spec:
{
	'user': {
		'username': <str>,
		'password': <str>,
		'first_name': <str>,
		'last_name': <str>,
		'email': <str>
	}
}

# TODO: get api endpoints up and running
# authentication based on JWTs
# and optimization / code cleanup later

Authentication stuff
How long should agents be logged in
Should agent sessions expire after a specific amount of inactivity

API specs
- prefix: domain.com/api/
- /login
- /logout
- /user (POST)
- /user/<username> (GET)
- /user/<username>/events (GET, POST)
- /event/list?title=[query]&page=[pagenum] (GET)
- /event/ (POST)
- /event/<eventid> (GET)
- /event/users (POST)
- /event/users?page=[pagenum] (GET)
- /event/agents (POST)
- /event/agents?page=[pagenum] (GET)
- /event/admins (POST)
- /event/admins?page=[pagenum] (GET)
- /ticket (POST)
- /ticket/auth (GET)



API functionality
-JSON payloads
-recieve 6-digit long totp codes for verification and respond
-paginated list of users registered to event
-paginated list of events through some kind of search
-event creation
-change event parameters



API flowcharts
=== Initial ticket secret generation request ===
Client -> Backend
- JSON payload containing user credentials and event UUID
Backend
- Authenticates user (may or may not require user password), then checks event roster
  Generate secret if verification was successful
Backend -> Client
- JSON payload containing secret
Client
- Securely save secret along event UUID

*** Per-ticket hash
-should be unforgable from the user
-generation should be opaque
-should implicitly enforce user event registration
hash some combination of user-uuid + event-uuid + small per-ticket secret
which means we need to generate a small random bytestring for every ticket
 
=== Ticket TOTP verification requests ===
Client
- Loads desired secret from storage, generates TOTP code, and presents QR code
Client -> Agent
- Physical view of QR code to agent
Agent
- Frontend reads and decodes QR code, composes payload
Agent -> Backend
- JSON payload containing client-generated TOTP, agent credentials
Backend
- Verify payload
Backend -> Agent
- Response containing verification result

Remarks: Should agent be authenticated for every request?
What info should the client-generatd QR code contain?
User id with totp and let agent handle event UUID?

